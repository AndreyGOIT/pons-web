// src/initializeData.ts
import { AppDataSource } from './data-source';
import { User, UserRole } from './models/User';
import { Course } from './models/Course';
import { CourseType } from './enums/CourseType';
import { Enrollment } from './models/Enrollment';
import bcrypt from 'bcrypt';

export const initializeDatabase = async () => {
  try {
    // ‚ùå –ù–ï –≤—ã–∑—ã–≤–∞–µ–º AppDataSource.initialize() –∑–¥–µ—Å—å
    
    // ----—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö-------
    // const admins = await AppDataSource.getRepository(User).find({
    //   where: { role: UserRole.ADMIN },
    // });

    // await AppDataSource.getRepository(User).remove(admins);
    // console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤: ${admins.length}`);
    // ----–∫–æ–Ω–µ—Ü –∫–æ–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö-------

    // === –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ===
    const adminCount = await AppDataSource.getRepository(User).count({
      where: { role: UserRole.ADMIN },
    });

    if (adminCount === 0) {
      const admin = new User();
      admin.name = 'Admin';
      admin.email = 'admin@fitnessapp.fi';
      admin.password = await bcrypt.hash('admin123', 10);
      admin.role = UserRole.ADMIN;

      await AppDataSource.manager.save(admin);
      console.log('‚úÖ Admin created');
    } else {
      console.log('‚ÑπÔ∏è Admin already exists');
    }

    // === –ö—É—Ä—Å—ã ===
    //------–æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã---------
    // await AppDataSource.query('PRAGMA foreign_keys = OFF');

    // await AppDataSource.getRepository(Enrollment).clear();
    // await AppDataSource.getRepository(Course).clear();

    // await AppDataSource.query('PRAGMA foreign_keys = ON');
    //---–∫–æ–Ω–µ—Ü –∫–æ–¥–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã------

    const courseCount = await AppDataSource.getRepository(Course).count();
    if (courseCount === 0) {
      const autumnStart = '2025-08-25';
      const autumnEnd = '2025-12-12';

      const courses = [
        {
          title: CourseType.KN,
          description: 'Kuntonyrkkeily on tehokas ja hauska tapa kohottaa kuntoa, kehitt√§√§ koordinaatiota ja purkaa stressi√§. Kurssi sopii kaikentasoisille osallistujille ‚Äì aiempaa kokemusta ei tarvita.',
          price: 175,
          startDate: autumnStart,
          endDate: autumnEnd,
        },
        {
          title: CourseType.NUORISO,
          description: 'Nuorten nyrkkeilykurssi keskittyy tekniikkaan, kunnon kehitt√§miseen ja itsevarmuuden kasvattamiseen. Harjoitukset pidet√§√§n rennossa ja kannustavassa ilmapiiriss√§.',
          price: 140,
          startDate: autumnStart,
          endDate: autumnEnd,
        },
        {
          title: CourseType.KILPA,
          description: 'Kilpanyrkkeilyn kurssi on suunnattu kokeneemmille harrastajille, jotka haluavat hioa taitojaan ja valmistautua otteluihin. Treenit sis√§lt√§v√§t kovatehoisia harjoituksia ja sparrausta.',
          price: 200,
          startDate: autumnStart,
          endDate: autumnEnd,
        }
      ];

      for (const c of courses) {
        const course = new Course();
        course.title = c.title;
        course.description = c.description;
        course.price = c.price;
        course.startDate = c.startDate;
        course.endDate = c.endDate;

        await AppDataSource.manager.save(course);
      }


      console.log('‚úÖ Courses created');
    } else {
      console.log('‚ÑπÔ∏è Courses already exist');
    }
  } catch (error) {
    console.error('‚ùå Error during initialization:', error);
  }
};